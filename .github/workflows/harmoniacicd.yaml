name: Android CI/CD Workflow

on:
  push:
    branches:
      - '**' # Semua branch untuk code coverage dan firebase-distribution

jobs:
  setup-env:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Decode google-services.json
      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 --decode > ./app/google-services.json

      # Step 3: Create config.properties
      - name: Create config.properties
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> config.properties
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> config.properties
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> config.properties
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> config.properties
          echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}" >> config.properties

      # Step 4: Upload environment files as artifact
      - name: Upload environment files
        uses: actions/upload-artifact@v3
        with:
          name: env-files
          path: |
            ./app/google-services.json
            ./config.properties

  code-coverage:
    runs-on: ubuntu-latest
    needs: setup-env # Pastikan setup-env selesai sebelum job ini berjalan

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Download environment files
      - name: Download environment files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      # Step 3: Setup JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      # Step 4: Grant execute permission for Gradlew
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Step 5: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Step 6: Run tests and generate Jacoco report
      - name: Run tests and generate Jacoco report
        run: ./gradlew clean test jacocoTestReport

      # Step 7: Upload Jacoco report to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: core/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          fail_ci_if_error: true

      # Step 8: Upload coverage report as artifact
      - name: Upload Coverage Report as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: core/build/reports/jacoco/jacocoTestReport/html/

  firebase-distribution:
    if: startsWith(github.ref, 'refs/heads/feature/') # Hanya berjalan untuk branch feature/*
    runs-on: ubuntu-latest
    needs: setup-env # Pastikan setup-env selesai sebelum job ini berjalan

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Download environment files
      - name: Download environment files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      # Step 3: Setup JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      # Step 4: Grant execute permission for Gradlew
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Step 5: Build APK
      - name: Build APK
        run: ./gradlew assembleDebug

      # Step 6: Distribute APK to Firebase
      - name: Distribute APK to Firebase
        env:
          FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
        run: |
          npx firebase appdistribution:distribute \
            app/build/outputs/apk/debug/app-debug.apk \
            --app ${{ secrets.FIREBASE_APP_ID }} \
            --groups internal-tester
