name: Android CI/CD Workflow

on:
  push:
    branches:
      - '**' # Semua branch akan menjalankan CI/CD

  pull_request:
    branches:
      - development
      - master

jobs:
  setup-env:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Decode google-services.json
      - name: Decode google-services.json
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON_B64 }}" | base64 --decode > ./app/google-services.json

      - name: Decode harmonia.jks
        run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > ./app/harmonia.jks

      # Step 3: Create config.properties
      - name: Create config.properties
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> config.properties
          echo "BASE_URL=${{ secrets.BASE_URL }}" >> config.properties
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> config.properties
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> config.properties
          echo "WEB_CLIENT_ID=${{ secrets.WEB_CLIENT_ID }}" >> config.properties
          echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> config.properties
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> config.properties
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> config.properties
          echo "KEYSTORE_FILE=./app/harmonia.jks" >> config.properties

      # Step 4: Upload environment files as artifact
      - name: Upload environment files
        uses: actions/upload-artifact@v3
        with:
          name: env-files
          path: |
            ./app/google-services.json
            ./config.properties
            ./app/harmonia.jks

  firebase-distribution:
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    needs: setup-env

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Download environment files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build APK
        run: ./gradlew assembleDebug

      - name: Distribute APK to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          token: ${{ secrets.FIREBASE_AUTH_TOKEN }}
          groups: internal-tester
          file: app/build/outputs/apk/debug/app-debug.apk

#  closed-testing:
#    if: github.event.pull_request.base.ref == 'development' && startsWith(github.head_ref, 'feature/')
#    runs-on: ubuntu-latest
#    needs: setup-env
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18'
#
#      - name: Download environment files
#        uses: actions/download-artifact@v3
#        with:
#          name: env-files
#
#      - name: Setup JDK
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'zulu'
#          java-version: '20'
#
#      - name: Grant execute permission for Gradlew
#        run: chmod +x ./gradlew
#
#      - name: Build Release APK
#        run: ./gradlew assembleRelease
#
#      - name: Upload to Play Store
#        uses: r0adkll/upload-google-play@v1
#        with:
#          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
#          packageName: "com.example.app"
#          releaseFiles: app/build/outputs/apk/release/app-release.apk
#          track: closed
#          userFraction: 1.0

  github-release:
    if: github.event.pull_request.base.ref == 'development' # Berjalan hanya ketika PR ke development
    runs-on: ubuntu-latest
    needs: setup-env # Pastikan setup-env selesai sebelum job ini berjalan

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Download environment files
      - name: Download environment files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      # Step 3: Setup JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      # Step 4: Grant execute permission for Gradlew
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # Step 5: Build APK (Release)
      - name: Build APK (Release)
        run: ./gradlew assembleRelease

      # Step 6: Install GitHub CLI
      - name: Install GitHub CLI
        run: sudo apt-get install gh

      # Step 7: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Step 8: Create GitHub Release
      - name: Create GitHub Release with CLI
        run: |
          gh release create ${{ github.ref_name }} \
          "app/build/outputs/apk/release/app-release.apk" \
          --title "Release for ${{ github.ref_name }}" \
          --notes "Automated release from GitHub Actions" \
          --prerelease

  code-coverage:
    if: github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest
    needs: setup-env

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download environment files
        uses: actions/download-artifact@v3
        with:
          name: env-files

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '20'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Run tests and generate Jacoco report
        run: ./gradlew clean test jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: core/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          fail_ci_if_error: true
